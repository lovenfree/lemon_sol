plugins {
	id 'java'
	id 'eclipse'
	id 'idea'
	id 'org.springframework.boot' version '2.6.8'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'com.google.cloud.tools.jib' version '3.1.4'
}

group = 'did'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'
targetCompatibility = '17'

configurations {
    unitTestImplementation.extendsFrom implementation
    unitTestRuntimeOnly.extendsFrom runtimeOnly
    moduleTestImplementation.extendsFrom implementation
    moduleTestRuntimeOnly.extendsFrom runtimeOnly
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
	set('springBootVersion', '2.6.8')
	set('springCloudVersion', '2021.0.3')
	set('dockerRegistry', '34.64.88.46')
}

sourceSets {
	unitTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/test/unit')
            include 'com/lgcns/buildcenter/vportal/unit/**'
        }
        resources.srcDir file('src/test/resources')
    }
    
    moduleTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/test/module')
            include 'com/lgcns/buildcenter/vportal/module/**'
        }
        resources.srcDir file('src/test/resources')
    }
}

// If you want to use library , just add on dependencies bracket and refresh gradle
dependencies {
	annotationProcessor 'org.projectlombok:lombok:1.18.20'
	compileOnly 'org.projectlombok:lombok:1.18.20'

	implementation 'javax.validation:validation-api:2.0.1.Final'
	implementation 'org.apache.commons:commons-lang3:3.6'
	implementation 'org.apache.httpcomponents:httpclient:4.5.9'
	implementation 'com.google.guava:guava:31.1-jre'
	implementation 'com.google.code.gson:gson:2.8.5'

	implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
	implementation "org.springframework.boot:spring-boot-starter-websocket:${springBootVersion}"
	implementation "org.springframework.boot:spring-boot-starter-data-rest:${springBootVersion}"
	implementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"

	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:2.2.10.RELEASE'

	implementation 'io.springfox:springfox-boot-starter:3.0.0' //.. swagger

	implementation 'com.netflix.feign:feign-jackson:8.1.0'
	implementation 'com.netflix.feign:feign-gson:8.18.0'
	implementation 'net.rakugakibox.util:yaml-resource-bundle:1.1'

	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	implementation 'org.springframework.boot:spring-boot-starter-aop' //..
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	outputs.dir snippetsDir
}

task unitTest(type: Test) {
    testClassesDirs = sourceSets.unitTest.output.classesDirs
    classpath = sourceSets.unitTest.runtimeClasspath
    outputs.upToDateWhen { false}
} 

task moduleTest(type: Test) {
    testClassesDirs = sourceSets.moduleTest.output.classesDirs
    classpath = sourceSets.moduleTest.runtimeClasspath
    outputs.upToDateWhen { false}
}

check.dependsOn unitTest
check.dependsOn moduleTest

asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
}

bootJar {
	mainClass = 'did.Application'
}

jib {
	allowInsecureRegistries = true
	from {
		image = "openjdk:17-jdk-slim-buster"
	}
	to {
		image = "${dockerRegistry}/did-solution-backend:latest"
	}
}
